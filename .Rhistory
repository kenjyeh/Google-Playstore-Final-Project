postResample(free_preds_test$class_pred05, free_test$Popular)
#Paid Apps
#Category main genre main removed because of error
LogModPaidApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + Support ,
data = paid_train)
summary(LogModPaidApps)
coef(LogModPaidApps)
paid_logit_pred_train <- predict(LogModPaidApps, paid_train )
paid_logit_pred_test <- predict(LogModPaidApps,  paid_test )
paid_preds_test <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_test, type = "response"),
paid_test)
paid_preds_train <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_train, type = "response"),
paid_train)
paid_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_tab_train <- table( paid_preds_train$Popular, paid_preds_train$class_pred05)
paid_tab_test <- table( paid_preds_test$Popular, paid_preds_test$class_pred05)
paid_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
paid_logit_diagnostics(paid_tab_train)
paid_logit_diagnostics(paid_tab_test)
paid_logit_diagnostics(paid_tab_train)
paid_logit_diagnostics(paid_tab_test)
#Paid Apps
#Category main genre main removed because of error
LogModPaidApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + Support ,
data = paid_train)
summary(LogModPaidApps)
coef(LogModPaidApps)
paid_logit_pred_train <- predict(LogModPaidApps, paid_train )
paid_logit_pred_test <- predict(LogModPaidApps,  paid_test )
paid_preds_test <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_test, type = "response"),
paid_test)
paid_preds_train <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_train, type = "response"),
paid_train)
paid_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_tab_train <- table( paid_preds_train$Popular, paid_preds_train$class_pred05)
paid_tab_test <- table( paid_preds_test$Popular, paid_preds_test$class_pred05)
paid_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
paid_logit_diagnostics(paid_tab_train)
paid_logit_diagnostics(paid_tab_test)
paid_logit_diagnostics(paid_tab_test)
#Paid Apps
#Category main genre main removed because of error
LogModPaidApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + Support ,
data = paid_train)
coef(LogModPaidApps)
paid_logit_pred_train <- predict(LogModPaidApps, paid_train )
#Paid Apps
#Category main genre main removed because of error
LogModPaidApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + Support ,
data = paid_train)
summary(LogModPaidApps)
coef(LogModPaidApps)
paid_logit_pred_train <- predict(LogModPaidApps, paid_train )
paid_logit_pred_test <- predict(LogModPaidApps,  paid_test )
paid_preds_test <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_test, type = "response"),
paid_test)
paid_preds_train <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_train, type = "response"),
paid_train)
paid_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_tab_train <- table( paid_preds_train$Popular, paid_preds_train$class_pred05)
paid_tab_test <- table( paid_preds_test$Popular, paid_preds_test$class_pred05)
paid_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
paid_logit_diagnostics(paid_tab_train)
postResample(paid_preds_train$class_pred05, paid_train$Popular)
postResample(paid_preds_test$class_pred05, paid_test$Popular)
paid_logit_diagnostics(paid_tab_test)
#Paid Apps
#Category main genre main removed because of error
LogModPaidApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + Support ,
data = paid_train)
summary(LogModPaidApps)
coef(LogModPaidApps)
paid_logit_pred_train <- predict(LogModPaidApps, paid_train )
paid_logit_pred_test <- predict(LogModPaidApps,  paid_test )
paid_preds_test <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_test, type = "response"),
paid_test)
paid_preds_train <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_train, type = "response"),
paid_train)
View(paid_test)
View(paid_test)
View(paid_preds_train)
View(paid_preds_train)
paid_preds_test <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_test, type = "response"),
paid_test)
paid_preds_train <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_train, type = "response"),
paid_train)
paid_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
View(paid_preds_train)
View(paid_preds_train)
paid_tab_train <- table( paid_preds_train$Popular, paid_preds_train$class_pred05)
paid_tab_test <- table( paid_preds_test$Popular, paid_preds_test$class_pred05)
paid_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
paid_logit_diagnostics(paid_tab_train)
paid_logit_diagnostics(paid_tab_test)
paid_logit_pred_test <- predict(LogModPaidApps,  paid_test )
paid_preds_test <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_test, type = "response"),
paid_test)
paid_preds_train <- data.frame(scores =
predict (LogModPaidApps, newdata = paid_train, type = "response"),
paid_train)
paid_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
paid_tab_train <- table( paid_preds_train$Popular, paid_preds_train$class_pred05)
paid_tab_test <- table( paid_preds_test$Popular, paid_preds_test$class_pred05)
View(paid_preds_test)
View(paid_preds_test)
postResample(paid_preds_train$class_pred05, paid_train$Popular)
paid_logit_diagnostics(paid_tab_train)
paid_logit_diagnostics(paid_tab_test)
postResample(paid_preds_test$class_pred05, paid_test$Popular)
#Forward Stepwise Model
#Size Apps
size_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating + Genre_main + bytes + Type + Support,
data = size_train,
nvmax = 7,
method = "forward")
#Forward Stepwise Model
#Size Apps
size_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating + Genre_main + bytes + Type + Support,
data = size_train,
nvmax = 7,
method = "forward")
#Forward Stepwise Model
#Size Apps
size_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Price  + Genre_main + bytes + Type + Support,
data = size_train,
nvmax = 7,
method = "forward")
#Forward Stepwise Model
#Size Apps
size_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + bytes + Type + Support,
data = size_train,
nvmax = 7,
method = "forward")
#Forward Stepwise Model
#Size Apps
size_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + bytes + Type + Support,
data = size_train,
nvmax = 7,
method = "forward")
summary(size_fit_fwd)
#pick top 5
FwdLogModSizeApps <- glm(Popular ~  Rating+ Numeric_Review + Type + bytes +Support ,
data = size_train)
View(size_train)
View(size_train)
#pick top 5
FwdLogModSizeApps <- glm(Popular ~  Rating+ Numeric_Reviews + Type + bytes +Support ,
data = size_train)
coef(FwdLogModSizeApps)
#pick top 5
FwdLogModSizeApps <- glm(Popular ~  Rating+ Numeric_Reviews + Type + bytes +Support ,
data = size_train)
coef(FwdLogModSizeApps)
fwd_size_logit_pred_train <- predict(FwdLogModSizeApps, size_train )
fwd_size_logit_pred_test <- predict(FwdLogModSizeApps,  size_test )
fwd_size_preds_test <- data.frame(scores =
predict (FwdLogModSizeApps, newdata = size_test, type = "response"),
size_test)
fwd_size_preds_train <- data.frame(scores =
predict (FwdLogModSizeApps, newdata = size_train, type = "response"),
size_train)
fwd_size_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_size_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_size_tab_train <- table( fwd_size_preds_train$Popular, fwd_size_preds_train$class_pred05)
fwd_size_tab_test <- table( fwd_size_preds_test$Popular, fwd_size_preds_test$class_pred05)
fwd_size_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
fwd_size_logit_diagnostics(fwd_size_tab_train)
fwd_size_logit_diagnostics(fwd_size_tab_test)
postResample(fwd_size_preds_train$class_pred05, fwd_size_train$Popular)
#Forward Stepwise Model
#Size Apps
size_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Price + Content.Rating  + bytes + Type + Support,
data = size_train,
nvmax = 7,
method = "forward")
summary(size_fit_fwd)
coef(size_fit_fwd,7)
#pick top 5
FwdLogModSizeApps <- glm(Popular ~  Rating+ Numeric_Reviews + Type + bytes +Support ,
data = size_train)
coef(FwdLogModSizeApps)
fwd_size_logit_pred_train <- predict(FwdLogModSizeApps, size_train )
fwd_size_logit_pred_test <- predict(FwdLogModSizeApps,  size_test )
fwd_size_preds_test <- data.frame(scores =
predict (FwdLogModSizeApps, newdata = size_test, type = "response"),
size_test)
fwd_size_preds_train <- data.frame(scores =
predict (FwdLogModSizeApps, newdata = size_train, type = "response"),
size_train)
View(fwd_size_preds_test)
View(fwd_size_preds_test)
fwd_size_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_size_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_size_tab_train <- table( fwd_size_preds_train$Popular, fwd_size_preds_train$class_pred05)
fwd_size_tab_test <- table( fwd_size_preds_test$Popular, fwd_size_preds_test$class_pred05)
fwd_size_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
fwd_size_logit_diagnostics(fwd_size_tab_train)
fwd_size_logit_diagnostics(fwd_size_tab_test)
postResample(fwd_size_preds_train$class_pred05, fwd_size_train$Popular)
postResample(fwd_size_preds_test$class_pred05, fwd_size_preds_test$Popular)
postResample(fwd_size_preds_train$class_pred05, fwd_size_preds_train$Popular)
postResample(fwd_size_preds_test$class_pred05, fwd_size_preds_test$Popular)
postResample(size_preds_train$class_pred05, size_preds_train$Popular)
postResample(size_preds_test$class_pred05, size_preds_test$Popular)
#Free Apps
free_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Content.Rating + Genre_main + Support,
data = free_train,
nvmax = 5,
method = "forward")
#Free Apps
free_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Content.Rating  + Support,
data = free_train,
nvmax = 5,
method = "forward")
summary(free_fit_fwd)
#run logistic regression
#drop content rating and support
FwdLogModFreeApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main + Support,
data = free_train)
coef(FwdLogModFreeApps)
#Free Apps
free_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Content.Rating  + Support,
data = free_train,
nvmax = 5,
method = "forward")
summary(free_fit_fwd)
coef(free_fit_fwd,5)
#run logistic regression
#drop content rating and support
FwdLogModFreeApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main + Support,
data = free_train)
coef(FwdLogModFreeApps)
#Free Apps
free_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main +
Content.Rating  + Support,
data = free_train,
nvmax = 5,
method = "forward")
summary(free_fit_fwd)
coef(free_fit_fwd,5)
#run logistic regression
#drop content rating and support
FwdLogModFreeApps <- glm(Popular ~  Numeric_Reviews + Rating + Category_Main + Support,
data = free_train)
coef(FwdLogModFreeApps)
fwd_free_logit_pred_train <- predict(FwdLogModFreeApps, free_train )
fwd_free_logit_pred_test <- predict(FwdLogModFreeApps,  free_test )
fwd_free_preds_test <- data.frame(scores =
predict (FwdLogModFreeApps, newdata = free_test, type = "response"),
free_test)
fwd_free_preds_train <- data.frame(scores =
predict (FwdLogModFreeApps, newdata = free_train, type = "response"),
free_train)
fwd_free_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_free_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_free_tab_train <- table( fwd_free_preds_train$Popular, fwd_free_preds_train$class_pred05)
fwd_free_tab_test <- table( fwd_free_preds_test$Popular, fwd_free_preds_test$class_pred05)
fwd_free_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
fwd_free_logit_diagnostics(fwd_free_tab_train)
fwd_free_logit_diagnostics(fwd_free_tab_test)
postResample(fwd_free_preds_train$class_pred05, fwd_free_train$Popular)
postResample(fwd_free_preds_test$class_pred05, fwd_free_test$Popular)
fwd_free_logit_diagnostics(fwd_free_tab_train)
fwd_free_logit_diagnostics(fwd_free_tab_test)
postResample(fwd_free_preds_train$class_pred05, fwd_free_preds_train$Popular)
postResample(fwd_free_preds_test$class_pred05, fwd_free_preds_test$Popular)
#Paid Apps
paid_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main+
Price + Content.Rating + Genre_main  + Support,
data = paid_train,
nvmax = 7,
method = "forward")
#Paid Apps
paid_fit_fwd <-
regsubsets(Popular ~ Numeric_Reviews + Rating + Category_Main+
Price + Content.Rating  + Support,
data = paid_train,
nvmax = 7,
method = "forward")
summary(paid_fit_fwd)
coef(paid_fit_fwd,7)
summary(paid_fit_fwd)
#take out rating, support, content rating, (generemain also removed due to error)
FwdLogModPaidApps <- glm(Popular ~  Numeric_Reviews  + Category_Main+ Support + Content.Rating +
Rating  ,
family = binomial,
data = paid_train)
#take out rating, support, content rating, (generemain also removed due to error)
FwdLogModPaidApps <- glm(Popular ~  Numeric_Reviews  + Category_Main+ Support + Content.Rating +
Rating  ,
family = binomial,
data = paid_train)
#fwd model
FwdLogModPaidApps <- glm(Popular ~  Numeric_Reviews  + Category_Main+ Support + Content.Rating +
Rating  ,
family = binomial,
data = paid_train)
coef(FwdLogModPaidApps)
#fwd model
FwdLogModPaidApps <- glm(Popular ~  Numeric_Reviews  + Category_Main+ Support + Content.Rating +
Rating  ,
family = binomial,
data = paid_train)
#fwd model
FwdLogModPaidApps <- glm(Popular ~  Numeric_Reviews  + Category_Main+ Support + Content.Rating +
Rating  ,
data = paid_train)
coef(FwdLogModPaidApps)
#fwd model
FwdLogModPaidApps <- glm(Popular ~  Numeric_Reviews  + Category_Main+ Support + Content.Rating +
Rating  ,
data = paid_train)
coef(FwdLogModPaidApps)
fwd_paid_logit_pred_train <- predict(FwdLogModPaidApps, paid_train )
fwd_paid_logit_pred_test <- predict(FwdLogModPaidApps,  paid_test )
fwd_paid_preds_test <- data.frame(scores =
predict (FwdLogModPaidApps, newdata = paid_test, type = "response"),
paid_test)
fwd_paid_preds_train <- data.frame(scores =
predict (FwdLogModPaidApps, newdata = paid_train, type = "response"),
paid_train)
fwd_paid_preds_train %<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_paid_preds_test%<>% mutate(class_pred05 = ifelse (scores > 0.5,1,0))
fwd_paid_tab_train <- table( paid_preds_train$Popular, paid_preds_train$class_pred05)
fwd_paid_tab_test <- table( paid_preds_test$Popular, paid_preds_test$class_pred05)
fwd_paid_logit_diagnostics <- function(tab) {
TP <- tab[2,2]
TN <- tab[1,1]
FP <- tab[1,2]
FN <- tab[2,1]
Ntrue <- tab [1,1] + tab[1,2]
Ptrue <- tab [2,1] + tab[2,2]
Accuracy <- (TP + TN)/(Ntrue +Ptrue)
sens <- TP/Ptrue
spec <- TN/Ntrue
FPR <- FP/Ntrue
cat(sprintf("Accuracy: %s\n", round(Accuracy,3)))
cat(sprintf("TP: %s\n", round(TP,3)))
cat(sprintf("TN: %s\n", round(TN,3)))
cat(sprintf("Sensitivity : %s\n", round(sens,3)))
cat(sprintf("Specificity: %s\n", round(spec,3)))
cat(sprintf("False Pos Rate: %s\n", round(FPR,3)))
}
fwd_paid_logit_diagnostics(fwd_paid_tab_train)
fwd_paid_logit_diagnostics(fwd_paid_tab_test)
postResample(fwd_paid_preds_test$class_pred05, fwd_paid_preds_test$Popular)
install.packages('skimr')
library('skimr')
skimr(playstore_df)
?skimr
skim(playstore_DF)
skim(Original_Data)
